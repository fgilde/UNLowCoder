using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UNLowCoder.Core.Data;

namespace UNLowCoder.SourceGen
{
    internal class UnLocodeCodeGeneratorCore
    {
        public UnLocodeCodeGeneratorCore() { }

        public SourceText CreateMainClass(GeneratorDataContext context)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("// Hauptdatei");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine("using UNLowCoder.Core.Data;");
            sb.AppendLine($"namespace {context.Namespace};");            
            sb.AppendLine($"    public partial class {context.GeneratedClassName}");
            sb.AppendLine("    {");
            sb.AppendLine("        public static partial class Countries {}");
            sb.AppendLine("        public static partial class Subdivisions {}");
            sb.AppendLine("        public static partial class Locations {}");
            sb.AppendLine("    }");            
            return SourceText.From(sb.ToString(), Encoding.UTF8);
        }

        public SourceText CreateCountriesClass(GeneratorDataContext context)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("// Countries Daten");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine("using UNLowCoder.Core.Data;");
            sb.AppendLine($"namespace {context.Namespace};");            
            sb.AppendLine($"public partial class {context.GeneratedClassName}");
            sb.AppendLine("{");
            sb.AppendLine("   public static partial class Countries");
            sb.AppendLine("   {");

            var usedNames = new HashSet<string>();

            foreach (var country in context.Countries)
            {
                var name = GetUniqueName(SafeIdentifier(country.CountryCode), usedNames);
                var subdivisionsArray = CreateSubdivisionsArray(country.Subdivisions);
                var locationsArray = CreateLocationsArray(country.Locations);

                sb.AppendLine($"            public static UnLocodeCountry {name} {{ get; }} = new UnLocodeCountry(");
                sb.AppendLine($"                \"{Escape(country.CountryCode)}\",");
                sb.AppendLine($"                {EscapeString(country.CountryName)},");
                sb.AppendLine($"                {subdivisionsArray},");
                sb.AppendLine($"                {locationsArray}");
                sb.AppendLine("            );");
            }

            var allCountries = string.Join(", ", context.Countries.Select(c => SafeIdentifier(c.CountryCode)));
            sb.AppendLine($"            public static System.Collections.Generic.IReadOnlyList<UnLocodeCountry> All {{ get; }} = new UnLocodeCountry[] {{ {string.Join(", ", context.Countries.Select(c => SafeIdentifier(c.CountryCode)))} }};");
            sb.AppendLine("        }");
            sb.AppendLine("}");
            return SourceText.From(sb.ToString(), Encoding.UTF8);
        }

        public SourceText CreateSubdivisionsClass(GeneratorDataContext context)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("// Subdivisions Daten");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine("using UNLowCoder.Core.Data;");
            sb.AppendLine($"namespace {context.Namespace};");            
            sb.AppendLine($"    public partial class {context.GeneratedClassName}");
            sb.AppendLine("    {");
            sb.AppendLine("        public static partial class Subdivisions");
            sb.AppendLine("        {");

            var allSubs = new List<string>();
            var usedNames = new HashSet<string>();

            foreach (var country in context.Countries)
            {
                foreach (var sub in country.Subdivisions)
                {
                    string baseName = SafeIdentifier(sub.CountryCode + "_" + sub.SubdivisionCode);
                    string id = GetUniqueName(baseName, usedNames);

                    sb.AppendLine($"            public static UnLocodeSubdivision {id} {{ get; }} = new UnLocodeSubdivision(" +
                                  $"\"{Escape(sub.CountryCode)}\", \"{Escape(sub.SubdivisionCode)}\", {EscapeString(sub.Name)}, {EscapeString(sub.Type)});");
                    allSubs.Add(id);
                }
            }

            var allSubsArray = string.Join(", ", allSubs);
            sb.AppendLine($"            public static System.Collections.Generic.IReadOnlyList<UnLocodeSubdivision> All {{ get; }} = new UnLocodeSubdivision[] {{ {allSubsArray} }};");
            sb.AppendLine("        }");
            sb.AppendLine("}");
            return SourceText.From(sb.ToString(), Encoding.UTF8);
        }

        public SourceText CreateLocationsClass(GeneratorDataContext context)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("// Locations Daten");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine("using UNLowCoder.Core.Data;");
            sb.AppendLine($"namespace {context.Namespace};");            
            sb.AppendLine($"    public partial class {context.GeneratedClassName}");
            sb.AppendLine("    {");
            sb.AppendLine("        public static partial class Locations");
            sb.AppendLine("        {");

            var allLocs = new List<string>();
            var usedNames = new HashSet<string>();

            foreach (var country in context.Countries)
            {
                foreach (var loc in country.Locations)
                {
                    string baseName = SafeIdentifier(loc.CountryCode + loc.LocationCode);
                    string id = GetUniqueName(baseName, usedNames);

                    sb.AppendLine($"            public static UnLocodeLocation {id} {{ get; }} = new UnLocodeLocation(" +
                                  $"\"{Escape(loc.CountryCode)}\", " +
                                  $"\"{Escape(loc.LocationCode)}\", " +
                                  $"{EscapeString(loc.Name)}, " +
                                  $"{EscapeString(loc.NameWoDiacritics)}, " +
                                  $"{(loc.SubdivisionCode != null ? EscapeString(loc.SubdivisionCode) : "null")}, " +
                                  $"LocationStatus.{loc.Status}, " +
                                  $"LocationFunction.{loc.Function}, " +
                                  $"{FormatDate(loc.LastUpdateDate)}, " +
                                  $"{EscapeString(loc.IATA)}, " +
                                  $"{FormatCoordinates(loc.Coordinates)}, " +
                                  $"{EscapeString(loc.Remarks)}, " +
                                  $"ChangeIndicator.{loc.Change}" +
                                  $");");
                    allLocs.Add(id);
                }
            }

            var allLocsArray = string.Join(", ", allLocs);
            sb.AppendLine($"            public static System.Collections.Generic.IReadOnlyList<UnLocodeLocation> All {{ get; }} = new UnLocodeLocation[] {{ {allLocsArray} }};");
            sb.AppendLine("        }");
            sb.AppendLine("}");
            return SourceText.From(sb.ToString(), Encoding.UTF8);
        }

        private static string GetUniqueName(string baseName, HashSet<string> usedNames)
        {
            string name = baseName;
            int counter = 2;
            while (usedNames.Contains(name))
            {
                name = baseName + "_" + counter;
                counter++;
            }
            usedNames.Add(name);
            return name;
        }

        private static string CreateSubdivisionsArray(IReadOnlyList<UnLocodeSubdivision> subs)
        {
            if (subs.Count == 0) return "System.Array.Empty<UnLocodeSubdivision>()";
            var init = string.Join(",\r\n", subs.Select(s =>
                $"new UnLocodeSubdivision(\"{Escape(s.CountryCode)}\", \"{Escape(s.SubdivisionCode)}\", {EscapeString(s.Name)}, {EscapeString(s.Type)})"));
            return $"new UnLocodeSubdivision[] {{ {init} }}";
        }

        private static string CreateLocationsArray(IReadOnlyList<UnLocodeLocation> locs)
        {
            if (locs.Count == 0) return "System.Array.Empty<UnLocodeLocation>()";
            var init = string.Join(",\r\n", locs.Select(l =>
                $"new UnLocodeLocation(" +
                $"\"{Escape(l.CountryCode)}\", " +
                $"\"{Escape(l.LocationCode)}\", " +
                $"{EscapeString(l.Name)}, " +
                $"{EscapeString(l.NameWoDiacritics)}, " +
                $"{(l.SubdivisionCode != null ? EscapeString(l.SubdivisionCode) : "null")}, " +
                $"LocationStatus.{l.Status}, " +
                $"LocationFunction.{l.Function}, " +
                $"{FormatDate(l.LastUpdateDate)}, " +
                $"{EscapeString(l.IATA)}, " +
                $"{FormatCoordinates(l.Coordinates)}, " +
                $"{EscapeString(l.Remarks)}, " +
                $"ChangeIndicator.{l.Change}" +
                $")"
            ));
            return $"new UnLocodeLocation[] {{ {init} }}";
        }

        private static string Escape(string s)
        {
            return s.Replace("\\", "\\\\").Replace("\"", "\\\"");
        }

        private static string EscapeString(string? s)
        {
            if (s == null) return "null";
            return $"\"{Escape(s)}\"";
        }

        private static string SafeIdentifier(string s)
        {
            if (string.IsNullOrEmpty(s)) return "_EMPTY";
            if (!char.IsLetter(s[0])) s = "_" + s;
            var sb = new StringBuilder();
            foreach (var ch in s)
            {
                if (char.IsLetterOrDigit(ch) || ch == '_')
                    sb.Append(ch);
                else
                    sb.Append('_');
            }
            return sb.ToString();
        }

        private static string FormatDate(DateTime? dt)
        {
            if (dt == null) return "null";
            var d = dt.Value;
            return $"new System.DateTime({d.Year}, {d.Month}, {d.Day}, 0, 0, 0, System.DateTimeKind.Unspecified)";
        }

        private static string FormatCoordinates(Coordinates? c)
        {
            if (c == null) return "null";
            return $"new Coordinates({c.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture)}, {c.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture)})";
        }
    }
}
